  Audit Report and Bug Analysis

  Objective: Resolve a recurring UI freeze and unresponsiveness issue in the POS
  application's cart and checkout workflow.

  Symptoms:
   1. The "Quotation" button (#quotationBtn) in the cart overlay works only once per session or        
      not at all.
   2. Subsequent clicks on the "Quotation" button, or sometimes any other button in the cart
      overlay (#previewInvoiceBtn, #cartCheckoutBtn), cause the UI to become unresponsive.
   3. The issue is intermittent and depends on the exact sequence of user actions, but it is
      reliably triggered by using the "Quotation" button.
   4. Error logs have intermittently shown TypeError: Cannot read properties of undefined
      (reading 'find') and ReferenceError for functions that should be globally available,
      indicating a severe race condition during script initialization.

  Root Cause Analysis:

  The core of the problem is a flawed application architecture resulting in a JavaScript 
  race condition and de-centralized event handling.

   1. Race Condition: The application loads two main scripts to control the UI: renderer.js and        
      quotation-bridge.js. Both scripts listen for the DOMContentLoaded event to initialize
      themselves. There is no guarantee which script will execute its initialization logic
      first. The quotation-bridge.js script depends on functions and global variables (like
      window.populateInvoiceModal and window.allProducts) that are created and populated by
      renderer.js. The bug occurs when the bridge script's listener runs before the renderer
      script has finished setting up these dependencies, leading to errors and unpredictable
      behavior. My attempts to patch this with a "wait-and-retry" loop failed because this core        
      architectural flaw is too severe to be reliably patched with a simple workaround.

   2. De-centralized Event Handling: The onclick listeners for the three main buttons in the
      cart overlay (Quotation, Preview Invoice, Checkout) are attached in different files
      (quotation-bridge.js and renderer.js) and at different times. This is extremely fragile.
      It makes the code difficult to debug and creates side effects where one button's action
      can break another's. The correct approach is to have a single point of truth for managing        
      the state and events of the cart overlay UI.

  Execution Plan for Remediation

  This plan will permanently fix the bugs by refactoring the code to eliminate the race
  condition and centralize the UI logic.

  Step 1: Eliminate the Competing Script (`quotation-bridge.js`)

  The quotation-bridge.js file is the source of the race condition. It must be removed from
  the project entirely.

   1. Delete the file:
       * Command: del quotation-bridge.js
       * Path: D:\Projects\pos-system-app\pos-desktop\quotation-bridge.js
   2. Remove the script from `index.html`:
       * Open D:\Projects\pos-system-app\pos-desktop\index.html.
       * Find and delete the following line to prevent the browser from trying to load the
         deleted file:
   1         <script src="./quotation-bridge.js"></script>

  **Step 2: ConsMy apologies, I was cut off. Here is the complete execution plan.

  ---

  Execution Plan for Remediation (Continued)

  Step 2: Refactor `renderer.js` to Centralize All Cart Logic

  All UI logic related to the cart overlay must be consolidated into renderer.js. The key is
  to make the renderCartOverlay function the single source of truth for both rendering the
  cart's content and wiring up its buttons. This ensures the buttons are always correctly
  configured whenever the overlay is visible.

   1. Clean Up Old, Scattered Listeners in `renderer.js`:
       * To prevent conflicts, the old, scattered onclick assignments for the cart buttons
         must be removed.
       * Action: Find and delete the following two code blocks from renderer.js. They are
         located near the end of the file.
           * Block 1 (Checkout Button):

   1             const confirmBtn = document.getElementById("cartCheckoutBtn");
   2             if (confirmBtn) {
   3               confirmBtn.disabled = false;
   4               confirmBtn.onclick = () => completeSaleAndPrint(false);
   5             }
           * Block 2 (Preview Invoice Button):

    1             // ‚úÖ Wire Preview Invoice button ONCE when overlay is rendered
    2             const previewBtn = document.getElementById("previewInvoiceBtn");
    3             if (previewBtn) {
    4               previewBtn.onclick = () => {
    5                 try {
    6                   if (cart.length === 0) {
    7                     showToast("üõí Cart is empty.");
    8                     return;
    9                   }
   10                   populateInvoiceModal([...cart], activeInvoiceNo || Date.now());
   11                   const invoiceModal = document.getElementById('invoice-modal');
   12                   const cartOverlay = document.getElementById('cartOverlay');
   13                   if (invoiceModal) {
   14                     setOverlayVisible('invoice-modal', true);
   15                     invoiceModal.style.display = 'flex';
   16                     invoiceModal.style.zIndex = '2000';
   17                     if (cartOverlay) {
   18                         cartOverlay.style.pointerEvents = 'none';
   19                     }
   20                   }
   21                 } catch (err) {
   22                   console.error('Error rendering invoice preview:', err);
   23                   showToast("‚ùå Error generating preview." );
   24                 }
   25               };
   26             }

   2. Replace `renderCartOverlay` with the New, Centralized Version:
       * This is the most critical step. The existing renderCartOverlay function will be
         replaced entirely with a new version that includes the logic for all three buttons.
       * Action: Find the existing async function renderCartOverlay() { ... } in renderer.js
         and replace the entire function with the following code:

   ... first 46 lines hidden ...
    36
    37           // [GEMINI FINAL REFACTOR] Centralize all cart overlay button
       listeners here.
    38           // Using .onclick ensures only one listener is ever attached,
       preventing duplicates and race conditions.
    39
    40           // 1. Quotation Button
    41           const quotationBtn = document.getElementById("quotationBtn");
    42           if (quotationBtn) {
    43             quotationBtn.onclick = async () => {
    44               if (cart.length === 0) { return showToast("üõí Cart is empty."); }
    45
    46               // Show UI immediately
    47               populateInvoiceModal(cart, 'QUOTATION', true);
    48               setOverlayVisible('invoice-modal', true);
    49
    50               // Print in background
    51               try {
    52                 const storeInfo = await window.api.getStoreSettings();
    53                 const customerName = document.getElementById("custName")?.value
       || "";
    54                 const customerPhone = document.getElementById("custPhone")?.
       value || "";
    55                 const gstin = document.getElementById("custGSTIN")?.value?.trim
       () || null;
    56
    57                 const itemsWithAmount = cart.map(item => {
    58                   const product = allProducts.find(p => p.id === item.id) || {};
    59                   const rate = item.price ?? 0;
    60                   const qty = item.quantity ?? 1;
    61                   const gst = item.gst_percent ?? product?.gst_percent ?? 0;
    62                   const discount = item.discount ?? 0;
    63                   const totalMRP = rate * qty;
    64                   const gstFraction = gst / (100 + gst);
    65                   const gstAmount = totalMRP * gstFraction;
    66                   const base = totalMRP - gstAmount;
    67                   const discountedBase = base - discount;
    68                   const finalAmount = discountedBase + gstAmount;
    69                   return { ...item, product_id: product?.product_id || null,
       final_amount: parseFloat(finalAmount.toFixed(2)), gst_percent: gst, discount:
       discount };
    70                 });
    71
    72                 let totalAmount = 0;
    73                 let totalGST = 0;
    74                 let totalDiscount = 0;
    75                 itemsWithAmount.forEach(item => {
    76                     const gross = (item.price || 0) * (item.quantity || 1);
    77                     const gstRate = (item.gst_percent || 0);
    78                     const gstAmount = (gross / (1 + gstRate / 100)) * (gstRate /
       100);
    79                     totalGST += gstAmount;
    80                     totalDiscount += (item.discount || 0);
    81                     totalAmount += gross - (item.discount || 0);
    82                 });
    83
    84                 const invoiceData = {
    85                   store: storeInfo,
    86                   meta: { customer_name: customerName, customer_phone:
       customerPhone, customer_gstin: gstin },
    87                   items: itemsWithAmount,
    88                   totals: { total_gst: totalGST, discount: totalDiscount,
       payable: totalAmount, cgst: totalGST / 2, sgst: totalGST / 2, total_amount:
       totalAmount + totalDiscount },
    89                   isQuotation: true
    90                 };
    91
    92                 if (window.api && typeof window.api.printInvoice === "function")
       {
    93                   await window.api.printInvoice(invoiceData);
    94                 }
    95               } catch (err) {
    96                 console.error("Quotation printing failed:", err);
    97                 showToast("‚ùå Could not prepare quotation for printing." ,
       "error");
    98               }
    99             };
   100           }
   101
   102           // 2. Preview Invoice Button
   103           const previewBtn = document.getElementById("previewInvoiceBtn");
   104           if (previewBtn) {
   105             previewBtn.onclick = () => {
   106               if (cart.length === 0) { return showToast("üõí Cart is empty."); }
   107               populateInvoiceModal(cart, activeInvoiceNo || 'PREVIEW');
   108               setOverlayVisible('invoice-modal', true);
   109               const cartOverlay = document.getElementById('cartOverlay');
   110               if (cartOverlay) cartOverlay.style.pointerEvents = 'none';
   111             };
   112           }
   113
   114           // 3. Checkout Button
   115           const checkoutBtn = document.getElementById("cartCheckoutBtn");
   116           if (checkoutBtn) {
   117             checkoutBtn.onclick = () => {
   118               completeSaleAndPrint(false);
   119             };
   120           }
   121         }

  ---

  Summary for the Next LLM

  The core task is to perform a refactoring of renderer.js and index.html. The
  quotation-bridge.js file must be deleted and its <script> tag removed from index.html.
  Then, the scattered onclick listeners for #cartCheckoutBtn and #previewInvoiceBtn must be
  removed from renderer.js. Finally, the renderCartOverlay function in renderer.js must be
  replaced with the new, comprehensive version provided above, which includes the
  centralized listeners for all three cart overlay buttons. This will solve the race
  condition and state management bugs.